<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (20,962 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (13,086 samples, 62.43%)</title><rect x="10.1" y="307.0" width="736.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (13,086 samples, 62.43%)</title><rect x="10.1" y="291.0" width="736.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (13,086 samples, 62.43%)</title><rect x="10.1" y="275.0" width="736.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (97 samples, 0.46%)</title><rect x="10.1" y="259.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (97 samples, 0.46%)</title><rect x="10.1" y="243.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (97 samples, 0.46%)</title><rect x="10.1" y="227.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (97 samples, 0.46%)</title><rect x="10.1" y="211.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (97 samples, 0.46%)</title><rect x="10.1" y="195.0" width="5.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="13.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.run (12,989 samples, 61.96%)</title><rect x="15.5" y="259.0" width="731.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.5" y="270.0">ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.run</text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.lambda$entity$0 (12,989 samples, 61.96%)</title><rect x="15.5" y="243.0" width="731.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.5" y="254.0">ru/mail/polis/service/temnovochka/ServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (426 samples, 2.03%)</title><rect x="15.5" y="227.0" width="24.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.5" y="238.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (426 samples, 2.03%)</title><rect x="15.5" y="211.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (310 samples, 1.48%)</title><rect x="15.5" y="195.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (310 samples, 1.48%)</title><rect x="15.5" y="179.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.5" y="190.0"></text>
</g>
<g>
<title>byte[] (310 samples, 1.48%)</title><rect x="15.5" y="163.0" width="17.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="18.5" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (116 samples, 0.55%)</title><rect x="33.0" y="195.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.0" y="206.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (116 samples, 0.55%)</title><rect x="33.0" y="179.0" width="6.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="36.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.proxy (10,485 samples, 50.02%)</title><rect x="39.5" y="227.0" width="590.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.5" y="238.0">ru/mail/polis/service/temnovochka/ServiceImpl.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,485 samples, 50.02%)</title><rect x="39.5" y="211.0" width="590.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.5" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,485 samples, 50.02%)</title><rect x="39.5" y="195.0" width="590.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.5" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (26 samples, 0.12%)</title><rect x="39.5" y="179.0" width="1.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="42.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (9,848 samples, 46.98%)</title><rect x="41.0" y="179.0" width="554.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.0" y="190.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (2,789 samples, 13.31%)</title><rect x="41.0" y="163.0" width="157.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="44.0" y="174.0">byte[]</text>
</g>
<g>
<title>byte[] (7,059 samples, 33.68%)</title><rect x="198.0" y="163.0" width="397.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="201.0" y="174.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (417 samples, 1.99%)</title><rect x="595.3" y="179.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="598.3" y="190.0">o..</text>
</g>
<g>
<title>byte[] (12 samples, 0.06%)</title><rect x="595.3" y="163.0" width="0.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="598.3" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (25 samples, 0.12%)</title><rect x="596.0" y="163.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (25 samples, 0.12%)</title><rect x="596.0" y="147.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.0" y="158.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 0.03%)</title><rect x="596.0" y="131.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="599.0" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (18 samples, 0.09%)</title><rect x="596.4" y="131.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="599.4" y="142.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.09%)</title><rect x="596.4" y="115.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="599.4" y="126.0"></text>
</g>
<g>
<title>one.nio.http.Response (7 samples, 0.03%)</title><rect x="597.4" y="163.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="600.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (332 samples, 1.58%)</title><rect x="597.8" y="163.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (332 samples, 1.58%)</title><rect x="597.8" y="147.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.8" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (332 samples, 1.58%)</title><rect x="597.8" y="131.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="600.8" y="142.0"></text>
</g>
<g>
<title>char[] (238 samples, 1.14%)</title><rect x="597.8" y="115.0" width="13.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="600.8" y="126.0"></text>
</g>
<g>
<title>java.lang.String (40 samples, 0.19%)</title><rect x="611.2" y="115.0" width="2.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="614.2" y="126.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (54 samples, 0.26%)</title><rect x="613.5" y="115.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.5" y="126.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (54 samples, 0.26%)</title><rect x="613.5" y="99.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.5" y="110.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (54 samples, 0.26%)</title><rect x="613.5" y="83.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.5" y="94.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.26%)</title><rect x="613.5" y="67.0" width="3.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="616.5" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (19 samples, 0.09%)</title><rect x="616.5" y="163.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (19 samples, 0.09%)</title><rect x="616.5" y="147.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="619.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (22 samples, 0.10%)</title><rect x="617.6" y="163.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="620.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (22 samples, 0.10%)</title><rect x="617.6" y="147.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.6" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (22 samples, 0.10%)</title><rect x="617.6" y="131.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.6" y="142.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.05%)</title><rect x="617.6" y="115.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="620.6" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.06%)</title><rect x="618.1" y="115.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="621.1" y="126.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.06%)</title><rect x="618.1" y="99.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="621.1" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (149 samples, 0.71%)</title><rect x="618.8" y="179.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (149 samples, 0.71%)</title><rect x="618.8" y="163.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.8" y="174.0"></text>
</g>
<g>
<title>byte[] (149 samples, 0.71%)</title><rect x="618.8" y="147.0" width="8.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="621.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (32 samples, 0.15%)</title><rect x="627.2" y="179.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.15%)</title><rect x="627.2" y="163.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="630.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.15%)</title><rect x="627.2" y="147.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="630.2" y="158.0"></text>
</g>
<g>
<title>java.lang.String (18 samples, 0.09%)</title><rect x="627.2" y="131.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="630.2" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14 samples, 0.07%)</title><rect x="628.2" y="131.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="631.2" y="142.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.07%)</title><rect x="628.2" y="115.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="631.2" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (13 samples, 0.06%)</title><rect x="629.0" y="179.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.0" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (13 samples, 0.06%)</title><rect x="629.0" y="163.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.0" y="174.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (13 samples, 0.06%)</title><rect x="629.0" y="147.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.0" y="158.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (13 samples, 0.06%)</title><rect x="629.0" y="131.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="632.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.responseProcessEntity (2,078 samples, 9.91%)</title><rect x="629.7" y="227.0" width="117.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.7" y="238.0">ru/mail/polis/..</text>
</g>
<g>
<title>one.nio.http.Response (61 samples, 0.29%)</title><rect x="629.7" y="211.0" width="3.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="632.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (224 samples, 1.07%)</title><rect x="633.2" y="211.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.2" y="222.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.44%)</title><rect x="633.2" y="195.0" width="5.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="636.2" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (81 samples, 0.39%)</title><rect x="638.4" y="195.0" width="4.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="641.4" y="206.0"></text>
</g>
<g>
<title>java.lang.String (50 samples, 0.24%)</title><rect x="643.0" y="195.0" width="2.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="646.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (1,793 samples, 8.55%)</title><rect x="645.8" y="211.0" width="100.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.8" y="222.0">ru/mail/poli..</text>
</g>
<g>
<title>java.util.NoSuchElementException (82 samples, 0.39%)</title><rect x="645.8" y="195.0" width="4.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="648.8" y="206.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1,528 samples, 7.29%)</title><rect x="650.4" y="195.0" width="86.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.4" y="206.0">java/util/..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1,528 samples, 7.29%)</title><rect x="650.4" y="179.0" width="86.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.4" y="190.0">java/lang/..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1,528 samples, 7.29%)</title><rect x="650.4" y="163.0" width="86.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.4" y="174.0">java/lang/..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1,528 samples, 7.29%)</title><rect x="650.4" y="147.0" width="86.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="653.4" y="158.0">java/lang/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1,528 samples, 7.29%)</title><rect x="650.4" y="131.0" width="86.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.4" y="142.0">java/lang/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1,528 samples, 7.29%)</title><rect x="650.4" y="115.0" width="86.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="653.4" y="126.0">java/lang/..</text>
</g>
<g>
<title>int[] (301 samples, 1.44%)</title><rect x="650.4" y="99.0" width="16.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="653.4" y="110.0"></text>
</g>
<g>
<title>java.lang.Object[] (390 samples, 1.86%)</title><rect x="667.3" y="99.0" width="22.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="670.3" y="110.0">j..</text>
</g>
<g>
<title>long[] (651 samples, 3.11%)</title><rect x="689.3" y="99.0" width="36.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="692.3" y="110.0">lon..</text>
</g>
<g>
<title>short[] (186 samples, 0.89%)</title><rect x="725.9" y="99.0" width="10.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="728.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteArrayUtils.packingKey (183 samples, 0.87%)</title><rect x="736.4" y="195.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="739.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteArrayUtils.getArrayFromByteBuffer (183 samples, 0.87%)</title><rect x="736.4" y="179.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.4" y="190.0"></text>
</g>
<g>
<title>byte[] (46 samples, 0.22%)</title><rect x="736.4" y="163.0" width="2.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="739.4" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (137 samples, 0.65%)</title><rect x="739.0" y="163.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.0" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (137 samples, 0.65%)</title><rect x="739.0" y="147.0" width="7.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="742.0" y="158.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (7,873 samples, 37.56%)</title><rect x="746.8" y="307.0" width="443.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.8" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (137 samples, 0.65%)</title><rect x="746.8" y="291.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.8" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (137 samples, 0.65%)</title><rect x="746.8" y="275.0" width="7.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="749.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (7,736 samples, 36.90%)</title><rect x="754.5" y="291.0" width="435.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.5" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,736 samples, 36.90%)</title><rect x="754.5" y="275.0" width="435.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.5" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,736 samples, 36.90%)</title><rect x="754.5" y="259.0" width="435.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.5" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5,481 samples, 26.15%)</title><rect x="754.5" y="243.0" width="308.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="254.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5,481 samples, 26.15%)</title><rect x="754.5" y="227.0" width="308.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.5" y="238.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (5,229 samples, 24.95%)</title><rect x="754.5" y="211.0" width="294.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.5" y="222.0">RequestHandler2_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (278 samples, 1.33%)</title><rect x="754.5" y="195.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (278 samples, 1.33%)</title><rect x="754.5" y="179.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (278 samples, 1.33%)</title><rect x="754.5" y="163.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String (119 samples, 0.57%)</title><rect x="754.5" y="147.0" width="6.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="757.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (159 samples, 0.76%)</title><rect x="761.2" y="147.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.2" y="158.0"></text>
</g>
<g>
<title>byte[] (159 samples, 0.76%)</title><rect x="761.2" y="131.0" width="9.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="764.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.entity (4,951 samples, 23.62%)</title><rect x="770.2" y="195.0" width="278.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.2" y="206.0">ru/mail/polis/service/temnovochka/Ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (189 samples, 0.90%)</title><rect x="770.2" y="179.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.2" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (189 samples, 0.90%)</title><rect x="770.2" y="163.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (189 samples, 0.90%)</title><rect x="770.2" y="147.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.2" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (189 samples, 0.90%)</title><rect x="770.2" y="131.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="773.2" y="142.0"></text>
</g>
<g>
<title>byte[] (189 samples, 0.90%)</title><rect x="770.2" y="115.0" width="10.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="773.2" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/819055707.linkToTargetMethod (188 samples, 0.90%)</title><rect x="780.8" y="179.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (188 samples, 0.90%)</title><rect x="780.8" y="163.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.get$Lambda (188 samples, 0.90%)</title><rect x="780.8" y="147.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.8" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.temnovochka.ServiceImpl$$Lambda$64 (188 samples, 0.90%)</title><rect x="780.8" y="131.0" width="10.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="783.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (260 samples, 1.24%)</title><rect x="791.4" y="179.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (260 samples, 1.24%)</title><rect x="791.4" y="163.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="794.4" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (260 samples, 1.24%)</title><rect x="791.4" y="147.0" width="14.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="794.4" y="158.0"></text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (133 samples, 0.63%)</title><rect x="806.0" y="179.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="809.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (133 samples, 0.63%)</title><rect x="806.0" y="163.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.0" y="174.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (133 samples, 0.63%)</title><rect x="806.0" y="147.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.0" y="158.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (133 samples, 0.63%)</title><rect x="806.0" y="131.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (133 samples, 0.63%)</title><rect x="806.0" y="115.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="809.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (133 samples, 0.63%)</title><rect x="806.0" y="99.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (133 samples, 0.63%)</title><rect x="806.0" y="83.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="809.0" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (133 samples, 0.63%)</title><rect x="806.0" y="67.0" width="7.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="809.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/LoadRouter.selectNodeForKey (4,181 samples, 19.95%)</title><rect x="813.5" y="179.0" width="235.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.5" y="190.0">ru/mail/polis/service/temnovoch..</text>
</g>
<g>
<title>com/google/common/collect/TreeRangeMap.get (125 samples, 0.60%)</title><rect x="813.5" y="163.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.5" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/TreeRangeMap.getEntry (125 samples, 0.60%)</title><rect x="813.5" y="147.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.5" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Cut.belowValue (57 samples, 0.27%)</title><rect x="813.5" y="131.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.5" y="142.0"></text>
</g>
<g>
<title>com.google.common.collect.Cut$BelowValue (57 samples, 0.27%)</title><rect x="813.5" y="115.0" width="3.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="816.5" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.floorEntry (68 samples, 0.32%)</title><rect x="816.7" y="131.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.7" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (68 samples, 0.32%)</title><rect x="816.7" y="115.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="819.7" y="126.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (68 samples, 0.32%)</title><rect x="816.7" y="99.0" width="3.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="819.7" y="110.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (3,965 samples, 18.92%)</title><rect x="820.6" y="163.0" width="223.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.6" y="174.0">com/google/common/hash/Abstra..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (3,713 samples, 17.71%)</title><rect x="820.6" y="147.0" width="209.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.6" y="158.0">com/google/common/hash/Abst..</text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction.newHasher (3,713 samples, 17.71%)</title><rect x="820.6" y="131.0" width="209.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.6" y="142.0">com/google/common/hash/Mess..</text>
</g>
<g>
<title>com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher (142 samples, 0.68%)</title><rect x="820.6" y="115.0" width="7.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="823.6" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.&lt;init&gt; (260 samples, 1.24%)</title><rect x="828.5" y="115.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="831.5" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.&lt;init&gt; (260 samples, 1.24%)</title><rect x="828.5" y="99.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.5" y="110.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractByteHasher.&lt;init&gt; (260 samples, 1.24%)</title><rect x="828.5" y="83.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="831.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (260 samples, 1.24%)</title><rect x="828.5" y="67.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="831.5" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (167 samples, 0.80%)</title><rect x="828.5" y="51.0" width="9.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="831.5" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (93 samples, 0.44%)</title><rect x="837.9" y="51.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="840.9" y="62.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.44%)</title><rect x="837.9" y="35.0" width="5.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="840.9" y="46.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.clone (3,311 samples, 15.80%)</title><rect x="843.2" y="115.0" width="186.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.2" y="126.0">java/security/MessageDig..</text>
</g>
<g>
<title>java.security.MessageDigest$Delegate (87 samples, 0.42%)</title><rect x="843.2" y="99.0" width="4.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="846.2" y="110.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.clone (3,224 samples, 15.38%)</title><rect x="848.1" y="99.0" width="181.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.1" y="110.0">sun/security/provider/S..</text>
</g>
<g>
<title>sun/security/provider/SHA2.clone (3,224 samples, 15.38%)</title><rect x="848.1" y="83.0" width="181.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.1" y="94.0">sun/security/provider/S..</text>
</g>
<g>
<title>int[] (2,467 samples, 11.77%)</title><rect x="848.1" y="67.0" width="138.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="851.1" y="78.0">int[]</text>
</g>
<g>
<title>int[] (48 samples, 0.23%)</title><rect x="987.0" y="67.0" width="2.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="990.0" y="78.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.clone (709 samples, 3.38%)</title><rect x="989.7" y="67.0" width="39.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="992.7" y="78.0">sun..</text>
</g>
<g>
<title>byte[] (430 samples, 2.05%)</title><rect x="989.7" y="51.0" width="24.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="992.7" y="62.0">b..</text>
</g>
<g>
<title>java/security/MessageDigestSpi.clone (279 samples, 1.33%)</title><rect x="1013.9" y="51.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.9" y="62.0"></text>
</g>
<g>
<title>sun.security.provider.SHA2$SHA256 (279 samples, 1.33%)</title><rect x="1013.9" y="35.0" width="15.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1016.9" y="46.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.hash (252 samples, 1.20%)</title><rect x="1029.6" y="147.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1032.6" y="158.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (252 samples, 1.20%)</title><rect x="1029.6" y="131.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.6" y="142.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (252 samples, 1.20%)</title><rect x="1029.6" y="115.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.6" y="126.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (252 samples, 1.20%)</title><rect x="1029.6" y="99.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.6" y="110.0"></text>
</g>
<g>
<title>byte[] (252 samples, 1.20%)</title><rect x="1029.6" y="83.0" width="14.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1032.6" y="94.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (91 samples, 0.43%)</title><rect x="1043.8" y="163.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.8" y="174.0"></text>
</g>
<g>
<title>java.lang.Integer (91 samples, 0.43%)</title><rect x="1043.8" y="147.0" width="5.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1046.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (252 samples, 1.20%)</title><rect x="1048.9" y="211.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1051.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (252 samples, 1.20%)</title><rect x="1048.9" y="195.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1051.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (252 samples, 1.20%)</title><rect x="1048.9" y="179.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.9" y="190.0"></text>
</g>
<g>
<title>java.lang.String (108 samples, 0.52%)</title><rect x="1048.9" y="163.0" width="6.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1051.9" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (144 samples, 0.69%)</title><rect x="1055.0" y="163.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1058.0" y="174.0"></text>
</g>
<g>
<title>byte[] (144 samples, 0.69%)</title><rect x="1055.0" y="147.0" width="8.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1058.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,500 samples, 7.16%)</title><rect x="1063.1" y="243.0" width="84.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1066.1" y="254.0">one/nio/ht..</text>
</g>
<g>
<title>one.nio.http.Request (194 samples, 0.93%)</title><rect x="1063.1" y="227.0" width="10.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1066.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (496 samples, 2.37%)</title><rect x="1074.0" y="227.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.0" y="238.0">o..</text>
</g>
<g>
<title>java.lang.String[] (496 samples, 2.37%)</title><rect x="1074.0" y="211.0" width="27.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1077.0" y="222.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (810 samples, 3.86%)</title><rect x="1101.9" y="227.0" width="45.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1104.9" y="238.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (810 samples, 3.86%)</title><rect x="1101.9" y="211.0" width="45.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1104.9" y="222.0">one/..</text>
</g>
<g>
<title>char[] (454 samples, 2.17%)</title><rect x="1101.9" y="195.0" width="25.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1104.9" y="206.0">c..</text>
</g>
<g>
<title>java.lang.String (164 samples, 0.78%)</title><rect x="1127.5" y="195.0" width="9.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1130.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (192 samples, 0.92%)</title><rect x="1136.7" y="195.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1139.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (192 samples, 0.92%)</title><rect x="1136.7" y="179.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (192 samples, 0.92%)</title><rect x="1136.7" y="163.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1139.7" y="174.0"></text>
</g>
<g>
<title>byte[] (192 samples, 0.92%)</title><rect x="1136.7" y="147.0" width="10.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1139.7" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (755 samples, 3.60%)</title><rect x="1147.5" y="243.0" width="42.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1150.5" y="254.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (755 samples, 3.60%)</title><rect x="1147.5" y="227.0" width="42.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1150.5" y="238.0">one/..</text>
</g>
<g>
<title>char[] (289 samples, 1.38%)</title><rect x="1147.5" y="211.0" width="16.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1150.5" y="222.0"></text>
</g>
<g>
<title>java.lang.String (145 samples, 0.69%)</title><rect x="1163.8" y="211.0" width="8.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1166.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (321 samples, 1.53%)</title><rect x="1171.9" y="211.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1174.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (321 samples, 1.53%)</title><rect x="1171.9" y="195.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1174.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (321 samples, 1.53%)</title><rect x="1171.9" y="179.0" width="18.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.9" y="190.0"></text>
</g>
<g>
<title>byte[] (321 samples, 1.53%)</title><rect x="1171.9" y="163.0" width="18.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1174.9" y="174.0"></text>
</g>
</g>
</svg>
