<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (14,489 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (9,919 samples, 68.46%)</title><rect x="10.1" y="307.0" width="807.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (9,919 samples, 68.46%)</title><rect x="10.1" y="291.0" width="807.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.1" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (9,919 samples, 68.46%)</title><rect x="10.1" y="275.0" width="807.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.1" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (71 samples, 0.49%)</title><rect x="10.1" y="259.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (71 samples, 0.49%)</title><rect x="10.1" y="243.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (71 samples, 0.49%)</title><rect x="10.1" y="227.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (71 samples, 0.49%)</title><rect x="10.1" y="211.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (71 samples, 0.49%)</title><rect x="10.1" y="195.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="13.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.run (9,848 samples, 67.97%)</title><rect x="15.9" y="259.0" width="802.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.9" y="270.0">ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.run</text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.lambda$entity$0 (9,848 samples, 67.97%)</title><rect x="15.9" y="243.0" width="802.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.9" y="254.0">ru/mail/polis/service/temnovochka/ServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (228 samples, 1.57%)</title><rect x="15.9" y="227.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (228 samples, 1.57%)</title><rect x="15.9" y="211.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (150 samples, 1.04%)</title><rect x="15.9" y="195.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (150 samples, 1.04%)</title><rect x="15.9" y="179.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.9" y="190.0"></text>
</g>
<g>
<title>byte[] (150 samples, 1.04%)</title><rect x="15.9" y="163.0" width="12.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="18.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (78 samples, 0.54%)</title><rect x="28.1" y="195.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.1" y="206.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (78 samples, 0.54%)</title><rect x="28.1" y="179.0" width="6.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="31.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.proxy (9,232 samples, 63.72%)</title><rect x="34.4" y="227.0" width="751.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.4" y="238.0">ru/mail/polis/service/temnovochka/ServiceImpl.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (9,232 samples, 63.72%)</title><rect x="34.4" y="211.0" width="751.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.4" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (9,232 samples, 63.72%)</title><rect x="34.4" y="195.0" width="751.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.4" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (36 samples, 0.25%)</title><rect x="34.4" y="179.0" width="3.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="37.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (8,692 samples, 59.99%)</title><rect x="37.4" y="179.0" width="707.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.4" y="190.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (2,551 samples, 17.61%)</title><rect x="37.4" y="163.0" width="207.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="40.4" y="174.0">byte[]</text>
</g>
<g>
<title>byte[] (6,141 samples, 42.38%)</title><rect x="245.1" y="163.0" width="500.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="248.1" y="174.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (346 samples, 2.39%)</title><rect x="745.3" y="179.0" width="28.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.3" y="190.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (27 samples, 0.19%)</title><rect x="745.4" y="163.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.4" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (27 samples, 0.19%)</title><rect x="745.4" y="147.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.4" y="158.0"></text>
</g>
<g>
<title>java.lang.String (5 samples, 0.03%)</title><rect x="745.4" y="131.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="748.4" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.15%)</title><rect x="745.8" y="131.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.8" y="142.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.15%)</title><rect x="745.8" y="115.0" width="1.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="748.8" y="126.0"></text>
</g>
<g>
<title>one.nio.http.Response (9 samples, 0.06%)</title><rect x="747.6" y="163.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="750.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (285 samples, 1.97%)</title><rect x="748.3" y="163.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="751.3" y="174.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (285 samples, 1.97%)</title><rect x="748.3" y="147.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.3" y="158.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (285 samples, 1.97%)</title><rect x="748.3" y="131.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.3" y="142.0">o..</text>
</g>
<g>
<title>char[] (210 samples, 1.45%)</title><rect x="748.3" y="115.0" width="17.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="751.3" y="126.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.20%)</title><rect x="765.4" y="115.0" width="2.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="768.4" y="126.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (46 samples, 0.32%)</title><rect x="767.8" y="115.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.8" y="126.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (46 samples, 0.32%)</title><rect x="767.8" y="99.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.8" y="110.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (46 samples, 0.32%)</title><rect x="767.8" y="83.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="770.8" y="94.0"></text>
</g>
<g>
<title>byte[] (46 samples, 0.32%)</title><rect x="767.8" y="67.0" width="3.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="770.8" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.05%)</title><rect x="771.6" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (7 samples, 0.05%)</title><rect x="771.6" y="147.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="774.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (16 samples, 0.11%)</title><rect x="772.1" y="163.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="775.1" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.11%)</title><rect x="772.1" y="147.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="775.1" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.11%)</title><rect x="772.1" y="131.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.06%)</title><rect x="772.1" y="115.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="775.1" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.05%)</title><rect x="772.9" y="115.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.9" y="126.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.05%)</title><rect x="772.9" y="99.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="775.9" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (110 samples, 0.76%)</title><rect x="773.4" y="179.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.4" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (110 samples, 0.76%)</title><rect x="773.4" y="163.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="776.4" y="174.0"></text>
</g>
<g>
<title>byte[] (110 samples, 0.76%)</title><rect x="773.4" y="147.0" width="9.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="776.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (33 samples, 0.23%)</title><rect x="782.4" y="179.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.4" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (33 samples, 0.23%)</title><rect x="782.4" y="163.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.4" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (33 samples, 0.23%)</title><rect x="782.4" y="147.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.4" y="158.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.06%)</title><rect x="782.4" y="131.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="785.4" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (25 samples, 0.17%)</title><rect x="783.0" y="131.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="786.0" y="142.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.17%)</title><rect x="783.0" y="115.0" width="2.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="786.0" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (15 samples, 0.10%)</title><rect x="785.1" y="179.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.1" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (15 samples, 0.10%)</title><rect x="785.1" y="163.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.1" y="174.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (15 samples, 0.10%)</title><rect x="785.1" y="147.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="788.1" y="158.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (15 samples, 0.10%)</title><rect x="785.1" y="131.0" width="1.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="788.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.responseProcessEntity (388 samples, 2.68%)</title><rect x="786.3" y="227.0" width="31.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.3" y="238.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (100 samples, 0.69%)</title><rect x="786.3" y="211.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (100 samples, 0.69%)</title><rect x="786.3" y="195.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.3" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (100 samples, 0.69%)</title><rect x="786.3" y="179.0" width="8.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="789.3" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Response (34 samples, 0.23%)</title><rect x="794.4" y="211.0" width="2.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="797.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (182 samples, 1.26%)</title><rect x="797.2" y="211.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.2" y="222.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.55%)</title><rect x="797.2" y="195.0" width="6.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="800.2" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (65 samples, 0.45%)</title><rect x="803.6" y="195.0" width="5.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="806.6" y="206.0"></text>
</g>
<g>
<title>java.lang.String (38 samples, 0.26%)</title><rect x="808.9" y="195.0" width="3.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="811.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (72 samples, 0.50%)</title><rect x="812.0" y="211.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="815.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteArrayUtils.getArrayFromByteBuffer (36 samples, 0.25%)</title><rect x="812.0" y="195.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.0" y="206.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.25%)</title><rect x="812.0" y="179.0" width="3.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="815.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteArrayUtils.packingKey (36 samples, 0.25%)</title><rect x="815.0" y="195.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteArrayUtils.getArrayFromByteBuffer (36 samples, 0.25%)</title><rect x="815.0" y="179.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.0" y="190.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.25%)</title><rect x="815.0" y="163.0" width="2.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="818.0" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,569 samples, 31.53%)</title><rect x="817.9" y="307.0" width="372.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.9" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (138 samples, 0.95%)</title><rect x="817.9" y="291.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.9" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (138 samples, 0.95%)</title><rect x="817.9" y="275.0" width="11.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="820.9" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4,431 samples, 30.58%)</title><rect x="829.1" y="291.0" width="360.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.1" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,431 samples, 30.58%)</title><rect x="829.1" y="275.0" width="360.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="832.1" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4,431 samples, 30.58%)</title><rect x="829.1" y="259.0" width="360.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="832.1" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,859 samples, 19.73%)</title><rect x="829.1" y="243.0" width="232.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.1" y="254.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,859 samples, 19.73%)</title><rect x="829.1" y="227.0" width="232.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.1" y="238.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (2,666 samples, 18.40%)</title><rect x="829.1" y="211.0" width="217.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.1" y="222.0">RequestHandler2_entity.handle..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (177 samples, 1.22%)</title><rect x="829.1" y="195.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="832.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (177 samples, 1.22%)</title><rect x="829.1" y="179.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (177 samples, 1.22%)</title><rect x="829.1" y="163.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.1" y="174.0"></text>
</g>
<g>
<title>java.lang.String (94 samples, 0.65%)</title><rect x="829.1" y="147.0" width="7.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="832.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (83 samples, 0.57%)</title><rect x="836.8" y="147.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.8" y="158.0"></text>
</g>
<g>
<title>byte[] (83 samples, 0.57%)</title><rect x="836.8" y="131.0" width="6.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="839.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl.entity (2,489 samples, 17.18%)</title><rect x="843.5" y="195.0" width="202.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.5" y="206.0">ru/mail/polis/service/temn..</text>
</g>
<g>
<title>java/lang/String.getBytes (75 samples, 0.52%)</title><rect x="843.5" y="179.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (75 samples, 0.52%)</title><rect x="843.5" y="163.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.5" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (75 samples, 0.52%)</title><rect x="843.5" y="147.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (75 samples, 0.52%)</title><rect x="843.5" y="131.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="846.5" y="142.0"></text>
</g>
<g>
<title>byte[] (75 samples, 0.52%)</title><rect x="843.5" y="115.0" width="6.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="846.5" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/819055707.linkToTargetMethod (78 samples, 0.54%)</title><rect x="849.7" y="179.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (78 samples, 0.54%)</title><rect x="849.7" y="163.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/ServiceImpl$$Lambda$64/1266225881.get$Lambda (78 samples, 0.54%)</title><rect x="849.7" y="147.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.temnovochka.ServiceImpl$$Lambda$64 (78 samples, 0.54%)</title><rect x="849.7" y="131.0" width="6.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="852.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (139 samples, 0.96%)</title><rect x="856.0" y="179.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (139 samples, 0.96%)</title><rect x="856.0" y="163.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.0" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (139 samples, 0.96%)</title><rect x="856.0" y="147.0" width="11.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="859.0" y="158.0"></text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (92 samples, 0.63%)</title><rect x="867.3" y="179.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (92 samples, 0.63%)</title><rect x="867.3" y="163.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.3" y="174.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (92 samples, 0.63%)</title><rect x="867.3" y="147.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.3" y="158.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (92 samples, 0.63%)</title><rect x="867.3" y="131.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (92 samples, 0.63%)</title><rect x="867.3" y="115.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.3" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (92 samples, 0.63%)</title><rect x="867.3" y="99.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (92 samples, 0.63%)</title><rect x="867.3" y="83.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.3" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (92 samples, 0.63%)</title><rect x="867.3" y="67.0" width="7.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="870.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/temnovochka/LoadRouter.selectNodeForKey (2,105 samples, 14.53%)</title><rect x="874.8" y="179.0" width="171.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.8" y="190.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>com/google/common/collect/TreeRangeMap.get (107 samples, 0.74%)</title><rect x="874.8" y="163.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.8" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/TreeRangeMap.getEntry (107 samples, 0.74%)</title><rect x="874.8" y="147.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.8" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Cut.belowValue (38 samples, 0.26%)</title><rect x="874.8" y="131.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="877.8" y="142.0"></text>
</g>
<g>
<title>com.google.common.collect.Cut$BelowValue (38 samples, 0.26%)</title><rect x="874.8" y="115.0" width="3.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="877.8" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.floorEntry (69 samples, 0.48%)</title><rect x="877.9" y="131.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="880.9" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (69 samples, 0.48%)</title><rect x="877.9" y="115.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="880.9" y="126.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (69 samples, 0.48%)</title><rect x="877.9" y="99.0" width="5.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="880.9" y="110.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (1,937 samples, 13.37%)</title><rect x="883.5" y="163.0" width="157.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="886.5" y="174.0">com/google/common/ha..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (1,823 samples, 12.58%)</title><rect x="883.5" y="147.0" width="148.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="886.5" y="158.0">com/google/common/h..</text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction.newHasher (1,823 samples, 12.58%)</title><rect x="883.5" y="131.0" width="148.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.5" y="142.0">com/google/common/h..</text>
</g>
<g>
<title>com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher (67 samples, 0.46%)</title><rect x="883.5" y="115.0" width="5.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="886.5" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.&lt;init&gt; (155 samples, 1.07%)</title><rect x="889.0" y="115.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="892.0" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.&lt;init&gt; (155 samples, 1.07%)</title><rect x="889.0" y="99.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.0" y="110.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractByteHasher.&lt;init&gt; (155 samples, 1.07%)</title><rect x="889.0" y="83.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="892.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (155 samples, 1.07%)</title><rect x="889.0" y="67.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (108 samples, 0.75%)</title><rect x="889.0" y="51.0" width="8.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="892.0" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 0.32%)</title><rect x="897.8" y="51.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.8" y="62.0"></text>
</g>
<g>
<title>byte[] (47 samples, 0.32%)</title><rect x="897.8" y="35.0" width="3.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="900.8" y="46.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.clone (1,601 samples, 11.05%)</title><rect x="901.6" y="115.0" width="130.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="904.6" y="126.0">java/security/Me..</text>
</g>
<g>
<title>java.security.MessageDigest$Delegate (78 samples, 0.54%)</title><rect x="901.6" y="99.0" width="6.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="904.6" y="110.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.clone (1,523 samples, 10.51%)</title><rect x="908.0" y="99.0" width="124.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="911.0" y="110.0">sun/security/pr..</text>
</g>
<g>
<title>sun/security/provider/SHA2.clone (1,523 samples, 10.51%)</title><rect x="908.0" y="83.0" width="124.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.0" y="94.0">sun/security/pr..</text>
</g>
<g>
<title>int[] (1,112 samples, 7.67%)</title><rect x="908.0" y="67.0" width="90.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="911.0" y="78.0">int[]</text>
</g>
<g>
<title>sun/security/provider/DigestBase.clone (411 samples, 2.84%)</title><rect x="998.5" y="67.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1001.5" y="78.0">su..</text>
</g>
<g>
<title>byte[] (301 samples, 2.08%)</title><rect x="998.5" y="51.0" width="24.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1001.5" y="62.0">b..</text>
</g>
<g>
<title>java/security/MessageDigestSpi.clone (110 samples, 0.76%)</title><rect x="1023.0" y="51.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.0" y="62.0"></text>
</g>
<g>
<title>sun.security.provider.SHA2$SHA256 (110 samples, 0.76%)</title><rect x="1023.0" y="35.0" width="9.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1026.0" y="46.0"></text>
</g>
<g>
<title>com/google/common/hash/MessageDigestHashFunction$MessageDigestHasher.hash (114 samples, 0.79%)</title><rect x="1032.0" y="147.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1035.0" y="158.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (114 samples, 0.79%)</title><rect x="1032.0" y="131.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1035.0" y="142.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (114 samples, 0.79%)</title><rect x="1032.0" y="115.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1035.0" y="126.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (114 samples, 0.79%)</title><rect x="1032.0" y="99.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.0" y="110.0"></text>
</g>
<g>
<title>byte[] (114 samples, 0.79%)</title><rect x="1032.0" y="83.0" width="9.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1035.0" y="94.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (61 samples, 0.42%)</title><rect x="1041.3" y="163.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.3" y="174.0"></text>
</g>
<g>
<title>java.lang.Integer (61 samples, 0.42%)</title><rect x="1041.3" y="147.0" width="5.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1044.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (193 samples, 1.33%)</title><rect x="1046.3" y="211.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (193 samples, 1.33%)</title><rect x="1046.3" y="195.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (193 samples, 1.33%)</title><rect x="1046.3" y="179.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1049.3" y="190.0"></text>
</g>
<g>
<title>java.lang.String (91 samples, 0.63%)</title><rect x="1046.3" y="163.0" width="7.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1049.3" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (102 samples, 0.70%)</title><rect x="1053.7" y="163.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1056.7" y="174.0"></text>
</g>
<g>
<title>byte[] (102 samples, 0.70%)</title><rect x="1053.7" y="147.0" width="8.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1056.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (708 samples, 4.89%)</title><rect x="1062.0" y="243.0" width="57.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1065.0" y="254.0">one/ni..</text>
</g>
<g>
<title>one.nio.http.Request (104 samples, 0.72%)</title><rect x="1062.0" y="227.0" width="8.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1065.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (250 samples, 1.73%)</title><rect x="1070.4" y="227.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1073.4" y="238.0"></text>
</g>
<g>
<title>java.lang.String[] (250 samples, 1.73%)</title><rect x="1070.4" y="211.0" width="20.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1073.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (354 samples, 2.44%)</title><rect x="1090.8" y="227.0" width="28.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.8" y="238.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (354 samples, 2.44%)</title><rect x="1090.8" y="211.0" width="28.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1093.8" y="222.0">on..</text>
</g>
<g>
<title>char[] (206 samples, 1.42%)</title><rect x="1090.8" y="195.0" width="16.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1093.8" y="206.0"></text>
</g>
<g>
<title>java.lang.String (49 samples, 0.34%)</title><rect x="1107.6" y="195.0" width="4.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1110.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (99 samples, 0.68%)</title><rect x="1111.6" y="195.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1114.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (99 samples, 0.68%)</title><rect x="1111.6" y="179.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1114.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (99 samples, 0.68%)</title><rect x="1111.6" y="163.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1114.6" y="174.0"></text>
</g>
<g>
<title>byte[] (99 samples, 0.68%)</title><rect x="1111.6" y="147.0" width="8.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1114.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (55 samples, 0.38%)</title><rect x="1119.6" y="243.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1122.6" y="254.0"></text>
</g>
<g>
<title>byte[] (55 samples, 0.38%)</title><rect x="1119.6" y="227.0" width="4.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1122.6" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (149 samples, 1.03%)</title><rect x="1124.1" y="243.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1127.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (149 samples, 1.03%)</title><rect x="1124.1" y="227.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1127.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (149 samples, 1.03%)</title><rect x="1124.1" y="211.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.1" y="222.0"></text>
</g>
<g>
<title>java.lang.String (57 samples, 0.39%)</title><rect x="1124.1" y="195.0" width="4.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1127.1" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (92 samples, 0.63%)</title><rect x="1128.8" y="195.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1131.8" y="206.0"></text>
</g>
<g>
<title>byte[] (92 samples, 0.63%)</title><rect x="1128.8" y="179.0" width="7.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1131.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (660 samples, 4.56%)</title><rect x="1136.2" y="243.0" width="53.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1139.2" y="254.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (660 samples, 4.56%)</title><rect x="1136.2" y="227.0" width="53.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1139.2" y="238.0">one/n..</text>
</g>
<g>
<title>char[] (306 samples, 2.11%)</title><rect x="1136.2" y="211.0" width="25.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1139.2" y="222.0">c..</text>
</g>
<g>
<title>java.lang.String (121 samples, 0.84%)</title><rect x="1161.2" y="211.0" width="9.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1164.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (233 samples, 1.61%)</title><rect x="1171.0" y="211.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (233 samples, 1.61%)</title><rect x="1171.0" y="195.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1174.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (233 samples, 1.61%)</title><rect x="1171.0" y="179.0" width="19.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.0" y="190.0"></text>
</g>
<g>
<title>byte[] (233 samples, 1.61%)</title><rect x="1171.0" y="163.0" width="19.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1174.0" y="174.0"></text>
</g>
</g>
</svg>
